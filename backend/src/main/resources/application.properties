spring.application.name=MoneyGuard
app.version=0.0.1-SNAPSHOT

spring.profiles.active=${SPRING_PROFILES_ACTIVE}

server.port=${SERVER_PORT:8080}
server.servlet.context-path=/v1

spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

application.security.jwt.secret-key=${JWT_SECRET}
application.security.jwt.expiration=${JWT_EXPIRATION}

spring.redis.host=${REDIS_HOST}
spring.redis.port=${REDIS_PORT}

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.filter=true
springdoc.swagger-ui.deepLinking=true
springdoc.swagger-ui.displayRequestDuration=true
springdoc.swagger-ui.syntaxHighlight.activated=true

springdoc.pathsToMatch=/**
springdoc.default-produces-media-type=application/json
springdoc.default-consumes-media-type=application/json

logging.level.root=INFO
logging.level.src.main=DEBUG
logging.level.org.springframework.security=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.security=TRACE
logging.level.org.springframework.web=DEBUG

logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.file.name=logs/moneyguard.log
logging.logback.rollingpolicy.max-file-size=10MB

# Google Gemini AI Configuration
# API key for Google Gemini service
google.gemini.api-key=${GOOGLE_GEMINI_API_KEY:}
# Model name for Gemini API (используется официальным SDK)
google.gemini.model=${GOOGLE_GEMINI_MODEL:gemini-2.0-flash}

# VPN Proxy Configuration for AI Services
# Enable VPN routing for AI API requests to bypass geographic restrictions
vpn.proxy.enabled=${VPN_PROXY_ENABLED:false}
vpn.proxy.urls=${VPN_PROXY_URLS:}
vpn.proxy.auth.url=${VPN_PROXY_AUTH_URL:}
vpn.proxy.user=${VPN_PROXY_USER:}
vpn.proxy.password=${VPN_PROXY_PASSWORD:}

# Proxy rotation and health settings
vpn.proxy.rotation.enabled=${VPN_PROXY_ROTATION_ENABLED:true}
vpn.proxy.rotation.interval=${VPN_PROXY_ROTATION_INTERVAL:300000}
vpn.proxy.connection.timeout=${VPN_PROXY_CONNECTION_TIMEOUT:10000}
vpn.proxy.read.timeout=${VPN_PROXY_READ_TIMEOUT:30000}
vpn.proxy.fallback.direct=${VPN_PROXY_FALLBACK_DIRECT:true}

logging.logback.rollingpolicy.max-history=7

spring.jpa.show-sql=true

spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.validate-on-migrate=false
spring.flyway.out-of-order=true

spring.cache.type=redis
spring.cache.redis.time-to-live=3600000
spring.cache.redis.cache-null-values=false

logging.level.org.springdoc=DEBUG

# WebClient and HTTP logging for AI service
logging.level.org.springframework.web.reactive.function.client=DEBUG
logging.level.reactor.netty=INFO
