package src.main.service;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import java.net.*;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;
import java.util.stream.Collectors;
import src.main.model.ChatHistory;

@Service
@Slf4j
public class HttpGeminiService {

    @Value("${google.gemini.model:gemini-2.0-flash}")
    private String modelName;

    @Value("${google.gemini.api-key:${GOOGLE_GEMINI_API_KEY:}}")
    private String apiKey;    @Value("${vpn.proxy.enabled:false}")
    private boolean vpnProxyEnabled;

    private HttpClient httpClient;
    private ObjectMapper objectMapper;@PostConstruct
    public void initialize() {
        try {
            log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP Gemini Service...");
            log.info("VPN Proxy –≤–∫–ª—é—á–µ–Ω: {}", vpnProxyEnabled);
            log.info("API Key –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}", apiKey != null && !apiKey.trim().isEmpty());
            log.info("–ú–æ–¥–µ–ª—å: {}", modelName);

            objectMapper = new ObjectMapper();

            // –°–æ–∑–¥–∞–µ–º HttpClient - –ª–∏–±–æ —Å –ø—Ä–æ–∫—Å–∏, –ª–∏–±–æ –±–µ–∑
            if (vpnProxyEnabled) {
                httpClient = createProxyHttpClient();
                log.info("HTTP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π");
            } else {
                httpClient = HttpClient.newBuilder()
                        .connectTimeout(Duration.ofSeconds(60))
                        .version(HttpClient.Version.HTTP_1_1)
                        .build();
                log.info("HTTP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –ë–ï–ó –ø—Ä–æ–∫—Å–∏");
            }

            log.info("HTTP Gemini Service —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTTP Gemini Service: {}", e.getMessage(), e);
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å HTTP Gemini Service", e);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç HttpClient —Å –ø—Ä–æ–∫—Å–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ curl: -x "http://ZTU6FR:Xkv2tk@45.155.201.91:8000"
     */
    private HttpClient createProxyHttpClient() {
        log.info("üîß –°–æ–∑–¥–∞–µ–º HttpClient —Å –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –≤ curl...");
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
        InetSocketAddress proxyAddress = new InetSocketAddress("45.155.201.91", 8000);
        ProxySelector proxySelector = ProxySelector.of(proxyAddress);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–∫—Å–∏
        Authenticator proxyAuthenticator = new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                RequestorType requestorType = getRequestorType();
                String requestingHost = getRequestingHost();
                int requestingPort = getRequestingPort();
                
                log.debug("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –¢–∏–ø={}, –•–æ—Å—Ç={}, –ü–æ—Ä—Ç={}", 
                         requestorType, requestingHost, requestingPort);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏
                if (requestorType == RequestorType.PROXY && 
                    "45.155.201.91".equals(requestingHost) && requestingPort == 8000) {
                    
                    log.info("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–∫—Å–∏: ZTU6FR");
                    return new PasswordAuthentication("ZTU6FR", "Xkv2tk".toCharArray());
                }
                
                return null;
            }
        };

        // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP/1.1 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CONNECT tunneling
        HttpClient client = HttpClient.newBuilder()
                .proxy(proxySelector)
                .authenticator(proxyAuthenticator)
                .version(HttpClient.Version.HTTP_1_1)
                .connectTimeout(Duration.ofSeconds(60))
                .build();

        log.info("HttpClient —Å –ø—Ä–æ–∫—Å–∏ –≥–æ—Ç–æ–≤: 45.155.201.91:8000 (ZTU6FR:***)");
        return client;    }@PreDestroy
    public void cleanup() {
        log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã HTTP Gemini Service");
    }    public String generateResponse(String userMessage) {
        try {
            if (apiKey == null || apiKey.trim().isEmpty()) {
                log.error("Google Gemini API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                throw new RuntimeException("Google Gemini API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            }

            log.info("=== –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ö GEMINI API ===");
            log.info("VPN Proxy –≤–∫–ª—é—á–µ–Ω: {}", vpnProxyEnabled);
            log.info("–ú–æ–¥–µ–ª—å: {}, –°–æ–æ–±—â–µ–Ω–∏–µ: {} —Å–∏–º–≤–æ–ª–æ–≤", modelName, userMessage.length());

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π HttpClient
            if (vpnProxyEnabled) {
                return generateResponseViaCurl(userMessage);
            } else {
                return generateResponseViaHttpClient(userMessage);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Google Gemini API: " + e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ curl (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –ø—Ä–æ–∫—Å–∏)
     */
    private String generateResponseViaCurl(String userMessage) {
        try {
            log.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ curl —Å –ø—Ä–æ–∫—Å–∏...");

            // –°–æ–∑–¥–∞–µ–º JSON –∑–∞–ø—Ä–æ—Å
            GeminiRequest request = new GeminiRequest();
            request.setContents(List.of(new ContentPart(List.of(new TextPart(userMessage)))));
            String jsonBody = objectMapper.writeValueAsString(request);

            String url = String.format("https://generativelanguage.googleapis.com/v1beta/models/%s:generateContent?key=%s",
                    modelName, apiKey);

            // –ö–æ–º–∞–Ω–¥–∞ curl —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
            ProcessBuilder pb = new ProcessBuilder(
                    "curl", "-s", "-X", "POST",
                    "-H", "Content-Type: application/json",
                    "-d", jsonBody,
                    "--proxy", "http://ZTU6FR:Xkv2tk@45.155.201.91:8000",
                    "--connect-timeout", "60",
                    "--max-time", "120",
                    url
            );

            pb.redirectErrorStream(true);
            log.info("üîß –í—ã–ø–æ–ª–Ω—è–µ–º curl –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏");

            Process process = pb.start();

            // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            String result = new String(process.getInputStream().readAllBytes());
            int exitCode = process.waitFor();

            log.info("Curl –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: {}, –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {} —Å–∏–º–≤–æ–ª–æ–≤", exitCode, result.length());

            if (exitCode != 0) {
                log.error("Curl –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ö–æ–¥: {}, –í—ã–≤–æ–¥: {}", exitCode, result);
                throw new RuntimeException("Curl failed with exit code: " + exitCode + ", Output: " + result);
            }

            if (result == null || result.trim().isEmpty()) {
                log.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç curl");
                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç curl");
            }

            log.debug("–û—Ç–≤–µ—Ç curl (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {}",
                    result.length() > 200 ? result.substring(0, 200) + "..." : result);

            return parseGeminiResponse(result);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ curl –∑–∞–ø—Ä–æ—Å–∞: {}", e.getMessage(), e);
            throw new RuntimeException("Curl request failed: " + e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π HttpClient (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)
     */
    private String generateResponseViaHttpClient(String userMessage) {
        try {
            log.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ HttpClient –±–µ–∑ –ø—Ä–æ–∫—Å–∏...");

            // –°–æ–∑–¥–∞–µ–º JSON –∑–∞–ø—Ä–æ—Å
            GeminiRequest request = new GeminiRequest();
            request.setContents(List.of(new ContentPart(List.of(new TextPart(userMessage)))));
            String jsonBody = objectMapper.writeValueAsString(request);

            String url = String.format("https://generativelanguage.googleapis.com/v1beta/models/%s:generateContent?key=%s",
                    modelName, apiKey);

            HttpRequest httpRequest = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                    .timeout(Duration.ofMinutes(2))
                    .build();

            HttpResponse<String> response = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());

            log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API. –°—Ç–∞—Ç—É—Å: {}", response.statusCode());

            if (response.statusCode() != 200) {
                String errorBody = response.body() != null ? response.body() : "No body";
                log.error("–û—à–∏–±–∫–∞ API: HTTP {}, –¢–µ–ª–æ: {}", response.statusCode(), errorBody);
                throw new RuntimeException("HTTP " + response.statusCode() + ": " + errorBody);
            }

            String responseBody = response.body();
            if (responseBody == null || responseBody.trim().isEmpty()) {
                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API");
            }

            return parseGeminiResponse(responseBody);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ HttpClient –∑–∞–ø—Ä–æ—Å–∞: {}", e.getMessage(), e);
            throw new RuntimeException("HttpClient request failed: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini API
     */
    private String parseGeminiResponse(String responseBody) {
        try {
            GeminiResponse geminiResponse = objectMapper.readValue(responseBody, GeminiResponse.class);

            if (geminiResponse.getCandidates() != null && !geminiResponse.getCandidates().isEmpty()) {
                Candidate candidate = geminiResponse.getCandidates().get(0);
                if (candidate.getContent() != null && candidate.getContent().getParts() != null &&
                        !candidate.getContent().getParts().isEmpty()) {

                    String result = candidate.getContent().getParts().get(0).getText();
                    log.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini, –¥–ª–∏–Ω–∞: {} —Å–∏–º–≤–æ–ª–æ–≤", result != null ? result.length() : 0);
                    return result != null ? result : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.";
                }
            }

            log.warn("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API");
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.";

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Gemini: {}", e.getMessage());
            log.debug("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {}", responseBody);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: " + e.getMessage());
        }
    }
    public String generateFinancialAdvice(String context) {
        String prompt = String.format(
            "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–∞–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:\n\n%s\n\n" +
            "–î–∞–π 3-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
            context
        );
        
        return generateResponse(prompt);
    }

    public String analyzeTransaction(String transactionInfo) {
        String prompt = String.format(
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç:\n\n%s\n\n" +
            "–î–∞–π 1-2 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞ –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ.",
            transactionInfo
        );
        
        return generateResponse(prompt);
    }    public String getProxyStatus() {
        if (!vpnProxyEnabled) {
            return "VPN –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω";
        }
        
        return "VPN –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω: 45.155.201.91:8000 (ZTU6FR:***)";
    }

    // DTO –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API
    @Data
    public static class GeminiRequest {
        private List<ContentPart> contents;
    }

    @Data
    public static class ContentPart {
        private List<TextPart> parts;

        public ContentPart(List<TextPart> parts) {
            this.parts = parts;
        }
    }

    @Data
    public static class TextPart {
        private String text;

        public TextPart(String text) {
            this.text = text;
        }
    }    @Data
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class GeminiResponse {
        private List<Candidate> candidates;
    }

    @Data
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class Candidate {
        private ContentResponse content;
    }    @Data
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class ContentResponse {
        private List<PartResponse> parts;
        private String role;
    }

    @Data
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class PartResponse {
        private String text;
    }
}
