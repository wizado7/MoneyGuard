services:
  app:
    build: .
    container_name: moneyguard-backend
    restart: always
    ports:
      - "8080:8080"
    security_opt:
      - apparmor=unconfined
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - SERVER_PORT=${SERVER_PORT}
      - SPRING_DATASOURCE_URL=${DB_URL}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_REDIS_HOST=${REDIS_HOST}
      - SPRING_REDIS_PORT=${REDIS_PORT}
      - APPLICATION_SECURITY_JWT_SECRET_KEY=${JWT_SECRET}
      - APPLICATION_SECURITY_JWT_EXPIRATION=${JWT_EXPIRATION}
    networks:
      - moneyguard-network

  postgres:
    image: postgres:15-alpine
    container_name: moneyguard-postgres
    restart: always
    ports:
      - "5432:5432"
    security_opt:
      - apparmor=unconfined
    environment:
      - POSTGRES_DB=moneyguard
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - moneyguard-network

  redis:
    image: redis:7-alpine
    container_name: moneyguard-redis
    restart: always
    ports:
      - "6379:6379"
    security_opt:
      - apparmor=unconfined
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - moneyguard-network

networks:
  moneyguard-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
